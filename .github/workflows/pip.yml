name: "Pip"

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - master
  release:
    types:
      - published

jobs:
  build:
    name: Build with Pip
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-13, macos-14, ubuntu-latest]
        python-version: ["3.9","3.11","3.12"]
        exclude:
          - platform: windows-latest
            python-version: "3.9"
          - platform: windows-latest
            python-version: "3.12"

    steps:
    - uses: actions/checkout@v4

    - name: Install Intel MacOS dependencies
      if: matrix.platform == 'macos-13'
      shell: bash
      run: |
        brew install boost
        brew install hdf5
        brew install ninja
        
        brew install llvm
        echo 'export PATH="/usr/local/opt/llvm/bin:$PATH"' >> /Users/runner/.bash_profile
        source /Users/runner/.bash_profile
        
        gcc --version
        gfortran --version
        cmake --version
        brew info boost
        brew info hdf5


    - name: Install ARM MacOS dependencies
      if: matrix.platform == 'macos-14'
      shell: bash
      run: |
        brew install boost
        brew install hdf5
        brew install ninja
        
        brew install llvm
        echo 'export PATH="/opt/homebrew/opt/llvm/bin:$PATH"' >> /Users/runner/.bash_profile
        ln -s /opt/homebrew/bin/gfortran-14 /usr/local/bin/gfortran
        
        gcc --version
        gfortran --version
        cmake --version
        brew info boost
        brew info hdf5


    - name: Install Windows Dependencies
      if: matrix.platform == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: CLANG64
        update: true
        install: >
          zip
          git
          mingw-w64-clang-x86_64-curl
          mingw-w64-clang-x86_64-toolchain
          mingw-w64-clang-x86_64-flang
          mingw-w64-clang-x86_64-cmake
          mingw-w64-clang-x86_64-boost
          mingw-w64-clang-x86_64-hdf5
          mingw-w64-clang-x86_64-libzip
          mingw-w64-clang-x86_64-zlib
          mingw-w64-clang-x86_64-libaec
          mingw-w64-clang-x86_64-python-pip-tools

    - uses: actions/setup-python@v5
      with:
        python-version: "${{ matrix.python-version }}"

    - name: Build and install macos-13
      run: |
        export MACOSX_DEPLOYMENT_TARGET=14.0
        PATH="/usr/local/opt/llvm/bin:$PATH"
        pip wheel . -w dist
        pip install delocate
        delocate-listdeps dist/*.whl
        delocate-wheel -v dist/*.whl
        pip install dist/*.whl
      if: matrix.platform == 'macos-13'

    - name: Build and install macos-14
      run: |
        PATH="/opt/homebrew/opt/llvm/bin:$PATH"
        pip wheel . -w dist
        pip install delocate
        delocate-listdeps dist/*.whl
        delocate-wheel -v dist/*.whl
        pip install dist/*.whl
      if: matrix.platform == 'macos-14'

    - name: Build and install windows-latest
      shell: msys2 {0}
      run: |
        pip wheel --verbose -Ccmake.define.CMAKE_C_COMPILER="clang.exe" -Ccmake.define.CMAKE_CXX_COMPILER="clang++.exe" . -w dist
        pip install delvewheel
        delvewheel needed -v dist/*.whl
        delvewheel repair -v dist/*.whl
        pip install dist/*.whl
      if: matrix.platform == 'windows-latest'

    - name: Build and install manylinux
      run: |
        docker run --rm -v $(pwd):/io quay.io/pypa/manylinux2014_x86_64 \
           /bin/bash -c \
           "yum install -y boost-devel hdf5-devel ninja-build && \
           /opt/python/cp39-cp39/bin/pip wheel /io/ -w /io/dist && \
           auditwheel repair /io/dist/*.whl -w /io/dist/"
        echo "keeping only the manylinux wheels, remove those with -linux_x86_64.whl in the name"
        sudo rm -rf dist/*-linux_x86_64.whl
        pip install dist/*.whl
      if: matrix.platform == 'ubuntu-latest'

    - name: Test not windows
      run: |
        pip install pytest
        pytest
      if: matrix.platform != 'windows-latest'

    - name: Test on windows
      shell: msys2 {0}
      run: |
        pip install pytest
        pytest
      if: matrix.platform == 'windows-latest'

    - name: set wheel_file and artifact_name environment vars (non-windows)
      if: matrix.platform != 'windows-latest'
      run: |
        for wheel_file in dist/*.whl; do
          echo "Uploading $wheel_file"
          echo "wheel_file=$wheel_file" >> $GITHUB_ENV
          echo "artifact_name=$(basename $wheel_file)" >> $GITHUB_ENV
        done

    - name: set wheel_file and artifact_name environment vars (windows)
      if: matrix.platform == 'windows-latest'
      shell: pwsh
      run: |
        foreach ($wheel_file in Get-ChildItem -Path dist -Filter *.whl) {
          Write-Output "Uploading $wheel_file"
          echo "wheel_file=$wheel_file" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "artifact_name=$(Split-Path $wheel_file -Leaf)" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
        }

    - name: Upload wheel file
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.artifact_name }}
        path: ${{ env.wheel_file }}

    - name: Setup tmate session
      uses: mxschmitt/action-tmate@v3
      if: ${{ failure() }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

  publish-to-pypi:
    name: Publish to PyPI
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: pypi
    permissions:
      id-token: write

    steps:
    - name: download all artifacts (wheels and executables)
      uses: actions/download-artifact@v4
      with:
        path: dist_temp/

    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12'

    - name: Publish wheels to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TESTPYPI_TOKEN }}
      run: |
        pip install twine
        mkdir dist
        echo "current directory is $(pwd)"
        ls -al dist*
        echo "absolute paths of wheels:"
        find dist_temp -type f -name '*.whl' -exec sh -c 'echo "$(realpath {})"/' \;
        echo "moving wheels to dist directory"
        find dist_temp -type f -name '*.whl' -exec sh -c 'mv "$(realpath {})" dist/' \;
        twine upload --repository testpypi dist/*.whl

    - name: Setup tmate session for PyPI upload failure
      uses: mxschmitt/action-tmate@v3
      if: ${{ failure() }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

